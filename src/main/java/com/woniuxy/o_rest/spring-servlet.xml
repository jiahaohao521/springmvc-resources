<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<context:component-scan base-package="com.woniuxy.o_rest" />
	
	<mvc:annotation-driven />

	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- 
		前端控制器，接受到一个请求以后，就会把请求叫做 映射器， 映射器再去根据地址，找对应的 handler（方法）
		实际上，在前端控制前把请求交给映射器之前，会先看看请求是否与<mvc:resources>中所描述的地址匹配，
			如果不匹配，才把请求继续交给映射器
			如果匹配，就不再把请求给映射器了，而是直接“抄近道”，进入location指定的位置找资源
		<mvc:resources location="/images/" mapping="/images/**"></mvc:resources>
		<mvc:resources location="/html/" mapping="/html/**"></mvc:resources>
		<mvc:resources location="/css/" mapping="/css/**"></mvc:resources>
		<mvc:resources location="/js/" mapping="/js/**"></mvc:resources>
	 -->
	 
	 <!-- 
	 	我们的前端控制器，映射路径，已然是 / 了， 这样就把tomcat内置的原本的DefaultServlet替代了
	 	而以下的配置，是springmvc把tomcat原有的DefaultServlet集成到框架环境中。
	 	当映射器找不到资源时，框架会主动把路径交给DefaultServlet。
	  -->
	 <mvc:default-servlet-handler/>
	
</beans>
